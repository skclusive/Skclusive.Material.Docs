@namespace Skclusive.Material.Docs.App.View
@inherits MaterialComponentBase

<MarkdownCode
    Class="@_Class"
    Style="@_Style"
    Text="@(@"
```css
<style>
    .demo-container {
        flex-grow: 1;
    }
    .demo-grid {
        height: 240px;
    }
    .demo-in-paper {
        color: var(--theme-palette-text-secondary);
        height: 100%;
        padding: 16px;
    }
    .demo-control {
        padding: 16px;
    }
</style>
```

```html
<Grid
    Class=""demo-container""
    Container>
    <Grid
        Item
        ExtraSmall=""@GridSize.Twelve"">
        <Grid
            Class=""demo-grid""
            Container
            Justify=""@Justify""
            Direction=""@Direction""
            AlignItems=""@AlignItems""
            Spacing=""@Spacing.Two"">
            @foreach(var index in Enumerable.Range(0, 3))
            {
                <Grid
                    @key=""index""
                    Item>
                    <Paper
                        Class=""demo-in-paper""
                        Style=""@($""padding-top: {(index + 1) * 10}px; padding-bottom: {(index + 1) * 10}px;"")"">
                       Cell @(index + 1)
                    </Paper>
                </Grid>
            }
        </Grid>
    </Grid>
    <Grid
        Item
        ExtraSmall=""@GridSize.Twelve"">
        <Paper
            Class=""demo-control"">
            <Grid
                Container
                Spacing=""@Spacing.Three"">
                <Grid
                    Item
                    ExtraSmall=""@GridSize.Twelve"">
                    <FormControl
                        Component=""fieldset"">
                        <FormLabel>Direction</FormLabel>
                        <RadioGroup
                            Row
                            Name=""Direction""
                            aria-label=""Direction""
                            Value=""@Direction.ToString()""
                            OnChange=""@OnDirectionChange"">
                            @foreach(var value in Enum.GetValues(typeof(Direction)).Cast<Direction>())
                            {
                                <FormControlLabel
                                    @key=""value""
                                    Label=""@value.ToString()"">
                                    <Radio
                                        Value=""@value.ToString()"" />
                                </FormControlLabel>
                            }
                        </RadioGroup>
                    </FormControl>
                </Grid>
                <Grid
                    Item
                    ExtraSmall=""@GridSize.Twelve"">
                    <FormControl
                        Component=""fieldset"">
                        <FormLabel>Justify</FormLabel>
                        <RadioGroup
                            Row
                            Name=""Justify""
                            aria-label=""Justify""
                            Value=""@Justify.ToString()""
                            OnChange=""@OnJustifyChange"">
                            @foreach(var value in Enum.GetValues(typeof(Justify)).Cast<Justify>())
                            {
                                <FormControlLabel
                                    @key=""value""
                                    Label=""@value.ToString()"">
                                    <Radio
                                        Value=""@value.ToString()""/>
                                </FormControlLabel>
                            }
                        </RadioGroup>
                    </FormControl>
                </Grid>
                <Grid
                    Item
                    ExtraSmall=""@GridSize.Twelve"">
                    <FormControl
                        Component=""fieldset"">
                        <FormLabel>AlignItems</FormLabel>
                        <RadioGroup
                            Row
                            Name=""AlignItems""
                            aria-label=""AlignItems""
                            Value=""@AlignItems.ToString()""
                            OnChange=""@OnAlignItemsChange"">
                            @foreach(var value in Enum.GetValues(typeof(AlignItems)).Cast<AlignItems>())
                            {
                                <FormControlLabel
                                    @key=""value""
                                    Label=""@value.ToString()"">
                                    <Radio
                                        Value=""@value.ToString()"" />
                                </FormControlLabel>
                            }
                        </RadioGroup>
                    </FormControl>
                </Grid>
            </Grid>
        </Paper>
    </Grid>
</Grid>
```

```csharp
@code
{
    private Justify Justify { set; get; } = Justify.Center;

    private void OnJustifyChange(ChangeEventArgs args)
    {
        if (Enum.TryParse(args.Value.ToString(), out Justify justify))
        {
            Justify = justify;

            StateHasChanged();
        }
    }

    private Direction Direction { set; get; } = Direction.Row;

    private void OnDirectionChange(ChangeEventArgs args)
    {
        if (Enum.TryParse(args.Value.ToString(), out Direction direction))
        {
            Direction = direction;

            StateHasChanged();
        }
    }

    private AlignItems AlignItems { set; get; } = AlignItems.Center;

    private void OnAlignItemsChange(ChangeEventArgs args)
    {
        if (Enum.TryParse(args.Value.ToString(), out AlignItems alignItems))
        {
            AlignItems = alignItems;

            StateHasChanged();
        }
    }
}
```
")" />
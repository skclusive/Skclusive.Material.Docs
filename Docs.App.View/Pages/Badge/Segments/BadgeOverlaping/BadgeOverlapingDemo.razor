@namespace Skclusive.Material.Docs.App.View

<style>
    .demo-form-control {
        margin-bottom: 24px;
    }
    .demo-row {
        display: flex;
        justify-content: center;
    }
    .demo-shape-container {
        margin: calc(var(--theme-spacing) * 2px);
    }
    .demo-shape {
        width: 40px;
        height: 40px;
        background-color: #90caf9;
    }
    .demo-shape-circle {
        border-radius: 50%;
    }
</style>

<div>
    <div
        class="demo-row">
        <FormControl
            Component="fieldset"
            Class="demo-form-control">
            <FormLabel
                Component="legend">
                Overlap
            </FormLabel>
            <RadioGroup
                Name="Overlap"
                aria-label="Overlap"
                Value="@Overlap.ToString()"
                OnChange="@OnOverlapChange">
                <FormControlLabel
                    Label="@BadgeOverlap.Rectangle.ToString()">
                    <Radio
                        Value="@BadgeOverlap.Rectangle.ToString()" />
                </FormControlLabel>
                <FormControlLabel
                    Label="@BadgeOverlap.Circle.ToString()">
                    <Radio
                        Value="@BadgeOverlap.Circle.ToString()" />
                </FormControlLabel>
            </RadioGroup>
        </FormControl>
    </div>
    <div
        class="demo-row">
        <div
            class="demo-shape-container">
            <Badge
                Color="@Color.Secondary"
                Overlap="@Overlap"
                BadgeText=" "
                Variant="@BadgeVariant.Dot">
                <div
                    class="@OverlapClass" />
            </Badge>
        </div>
        <div
            class="demo-shape-container">
            <Badge
                Color="@Color.Secondary"
                Overlap="@Overlap"
                BadgeText=" ">
                <div
                    class="@OverlapClass" />
            </Badge>
        </div>
    </div>
</div>

@code
{
    private string OverlapClass => "demo-shape " + (Overlap == BadgeOverlap.Circle ? "demo-shape-circle" : "");

    private BadgeOverlap Overlap { set; get; } = BadgeOverlap.Rectangle;

    private void OnOverlapChange(ChangeEventArgs args)
    {
        if (Enum.TryParse(args.Value.ToString(), out BadgeOverlap overlap))
        {
            Overlap = overlap;

            StateHasChanged();
        }
    }
}